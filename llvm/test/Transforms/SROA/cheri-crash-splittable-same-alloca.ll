; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes
; This test case previously triggered assertions in SROA ("Splittable transfers cannot reach the same alloca on both ends.")
; RUN: %cheri_purecap_opt -S -passes=sroa %s -o - | FileCheck %s
source_filename = "/Users/alex/cheri/llvm-project/libcxx/test/std/containers/sequences/deque/deque.cons/iter_iter.pass.cpp"
target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"

%struct.a = type { %struct.b, %struct.b }
%struct.b = type { ptr addrspace(200) }

define ptr addrspace(200) @d(ptr addrspace(200) %arg) addrspace(200) nounwind {
; CHECK-LABEL: define {{[^@]+}}@d
; CHECK-SAME: (ptr addrspace(200) [[ARG:%.*]]) addrspace(200) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    ret ptr addrspace(200) [[ARG]]
;
  %l = alloca %struct.a, align 16, addrspace(200)
  %dst.b = getelementptr %struct.a, ptr addrspace(200) %l, i32 0, i32 0
  %src.b = getelementptr inbounds %struct.a, ptr addrspace(200) %l, i32 0, i32 1
  %src.i32 = getelementptr inbounds %struct.b, ptr addrspace(200) %src.b, i32 0, i32 0
  store ptr addrspace(200) %arg, ptr addrspace(200) %src.i32, align 16
  call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) %dst.b, ptr addrspace(200) %src.b, i64 16, i1 false)
  %dst.i32 = getelementptr inbounds %struct.b, ptr addrspace(200) %dst.b, i32 0, i32 0
  %result = load ptr addrspace(200), ptr addrspace(200) %dst.i32, align 16
  ret ptr addrspace(200) %result
}

declare void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noalias nocapture writeonly, ptr addrspace(200) noalias nocapture readonly, i64, i1 immarg) addrspace(200)
declare void @llvm.lifetime.start.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200)
declare void @llvm.lifetime.end.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200)

