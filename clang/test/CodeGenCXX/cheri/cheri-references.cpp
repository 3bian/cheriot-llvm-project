// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
/// Check that C++ references are lowered to capabilities in IR.
// RUN: %cheri_purecap_cc1 -no-opaque-pointers -emit-llvm -o - %s | FileCheck %s

class A { };

// CHECK-LABEL: @_Z1fv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[A1:%.*]] = alloca [[CLASS_A:%.*]], align 1, addrspace(200)
// CHECK-NEXT:    [[A2:%.*]] = alloca [[CLASS_A]] addrspace(200)*, align 16, addrspace(200)
// CHECK-NEXT:    [[B:%.*]] = alloca i8, align 1, addrspace(200)
// CHECK-NEXT:    [[B2:%.*]] = alloca i8, align 1, addrspace(200)
// CHECK-NEXT:    store [[CLASS_A]] addrspace(200)* [[A1]], [[CLASS_A]] addrspace(200)* addrspace(200)* [[A2]], align 16
// CHECK-NEXT:    [[TMP0:%.*]] = load [[CLASS_A]] addrspace(200)*, [[CLASS_A]] addrspace(200)* addrspace(200)* [[A2]], align 16
// CHECK-NEXT:    [[CMP:%.*]] = icmp eq [[CLASS_A]] addrspace(200)* [[TMP0]], bitcast (i8 addrspace(200)* getelementptr (i8, i8 addrspace(200)* null, i64 19088743) to [[CLASS_A]] addrspace(200)*)
// CHECK-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL]], i8 addrspace(200)* [[B]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = load [[CLASS_A]] addrspace(200)*, [[CLASS_A]] addrspace(200)* addrspace(200)* [[A2]], align 16
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast [[CLASS_A]] addrspace(200)* [[TMP1]] to i8 addrspace(200)*
// CHECK-NEXT:    [[CMP1:%.*]] = icmp eq i8 addrspace(200)* [[TMP2]], getelementptr (i8, i8 addrspace(200)* null, i64 19088743)
// CHECK-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[CMP1]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL2]], i8 addrspace(200)* [[B2]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = load i8, i8 addrspace(200)* [[B]], align 1
// CHECK-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP3]] to i1
// CHECK-NEXT:    br i1 [[TOBOOL]], label [[LAND_RHS:%.*]], label [[LAND_END:%.*]]
// CHECK:       land.rhs:
// CHECK-NEXT:    [[TMP4:%.*]] = load i8, i8 addrspace(200)* [[B2]], align 1
// CHECK-NEXT:    [[TOBOOL3:%.*]] = trunc i8 [[TMP4]] to i1
// CHECK-NEXT:    br label [[LAND_END]]
// CHECK:       land.end:
// CHECK-NEXT:    [[TMP5:%.*]] = phi i1 [ false, [[ENTRY:%.*]] ], [ [[TOBOOL3]], [[LAND_RHS]] ]
// CHECK-NEXT:    ret i1 [[TMP5]]
//
bool f() {
  A a1;
  A& a2 = a1;
  bool b = &a2 == (A*)0x1234567;
  bool b2 = &a2 == (void*)0x1234567;
  return b && b2;
}
